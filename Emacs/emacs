(setq base-path "~/Config/dotfiles/Emacs/")

(load (concat base-path "straight.el"))
(load (concat base-path "keybindings.el"))
(load (concat base-path "latex.el"))

;; LSP
(use-package flycheck
	     :straight t
	     :init
	     (global-flycheck-mode t))
(use-package yasnippet
	     :straight t)
(use-package lsp-mode
	     :straight t
	     :hook (haskell-mode . lsp)
	     :commands lsp)
(use-package lsp-ui
	     :straight t
	     :commands lsp-ui-mode)
(use-package lsp-haskell
	     :straight t
	     ;; Comment/uncomment this line to see interactions between lsp client/server.
	     ;;(setq lsp-log-io t)
	     )

; http://steve.yegge.googlepages.com/effective-emacs
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(setq inhibit-startup-screen t)

(show-paren-mode 1)
(column-number-mode +1)
(setq mouse-yank-at-point t)

(add-to-list 'auto-mode-alist '("\\.ks\\'" . lisp-mode))

(add-hook 'haskell-mode-hook 'whitespace-mode)
(add-hook 'lisp-mode-hook 'whitespace-mode)
(add-hook 'lisp-interaction-mode-hook 'whitespace-mode)
(add-hook 'lisp-mode-hook (lambda () (setq indent-tabs-mode nil)))
(add-hook 'makefile-gmake-mode-hook 'whitespace-mode)

(use-package attrap
  :straight t
  )

(use-package dante
  :straight t
  :after haskell-mode
  :commands 'dante-mode
  :init
  (add-hook 'haskell-mode-hook 'flycheck-mode)
  ;; OR:
  ;; (add-hook 'haskell-mode-hook 'flymake-mode)
  ;; (add-hook 'haskell-mode-hook 'dante-mode)
  ;; This has to be run after flycheck is set up (in this case
  ;; implicitly, via dante).  If one uses the suggestion of the dante
  ;; README (i.e. to put it in the dante-mode-hook then it is run
  ;; every time dante-mode is enabled, and haskell-dante's next
  ;; checkers ends up containing haskell-hlint many times!
  :config
  (flycheck-add-next-checker 'haskell-dante '(warning . haskell-hlint))
  )

(use-package markdown-mode
  :straight t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  (add-hook 'markdown-mode-hook 'flyspell-mode)
  (setq ispell-dictionary "british")
  (add-hook 'markdown-mode-hook 'auto-fill-mode)
  (add-hook 'markdown-mode-hook 'whitespace-mode)
  :config
  (define-key markdown-mode-map (kbd "M-n") nil)
  (define-key markdown-mode-map (kbd "M-p") nil)
  )

(use-package helm
  :straight t
  :config
  (helm-mode 1)
  (require 'helm-config)
  )

(use-package undo-tree
  :straight t
  :init
  (global-undo-tree-mode)
  )

;; https://tuhdo.github.io/helm-intro.html

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-map "\C-h" 'backward-delete-char)
(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
(define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") #'helm-select-action)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(setq ; open helm buffer inside current window, not occupy whole other window
      helm-split-window-in-side-p           t
      ; search for library in `require' and `declare-function' sexp.
      helm-ff-search-library-in-sexp        t
      ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-scroll-amount                    8
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

;; ^ matches the start of an absolute filename so we can't use that
;; here.  I don't know how we match the start of the basename.
;; Anyway, this isn't really the right approach.. Really mutt should
;; launch emacs with some option that says "start mail-mode".  I don't
;; know how to do that, so this will do for now.
(add-to-list 'auto-mode-alist '("mutt-weber-" . mail-mode))

(windmove-default-keybindings)

;; For highliting the current line
(global-hl-line-mode)
;; And only show in the current window
(setq hl-global-line-sticky-flag nil)

;; Drag the buffer up and down whilst keeping the point on the same
;; text with M-p/M-n
(global-set-key "\M-p" (lambda () (interactive) (scroll-up 4)))
(global-set-key "\M-n" (lambda () (interactive) (scroll-down 4)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(dante-methods (quote (bare-cabal bare-ghci)))
 '(load-home-init-file t t)
 '(lsp-haskell-server-args '("-d" "-l" "/tmp/hls.log" "+RTS" "-M4G"))
 '(lsp-haskell-server-path "haskell-language-server-8.10.7")
 '(lsp-prefer-flymake nil)
 '(package-selected-packages
   (quote
    (diminish company yasnippet use-package lsp-ui lsp-haskell flycheck)))
 '(whitespace-style
   (quote
    (face trailing tabs lines-tail newline empty tab-mark))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 113 :width normal :foundry "unknown" :family "Inconsolata"))))
 '(company-tooltip ((t (:background "white" :foreground "black"))))
 '(fixed-pitch ((t (:family "Inconsolata"))))
 '(whitespace-empty ((t (:background "saddle brown" :foreground "firebrick"))))
 '(helm-selection ((t (:background "blue" :distant-foreground "black"))))
 '(lsp-ui-doc-background ((t (:background "blue"))))
 '(whitespace-tab ((t (:background "black" :foreground "cyan")))))

(setq ring-bell-function 'ignore)

(add-hook 'after-init-hook 'global-company-mode)
