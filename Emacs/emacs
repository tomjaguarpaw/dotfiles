(setq base-path "~/Config/dotfiles/Emacs/")

(load (concat base-path "straight.el"))
(load (concat base-path "keybindings.el"))
(load (concat base-path "latex.el"))

; http://steve.yegge.googlepages.com/effective-emacs
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(setq inhibit-startup-screen t)

(show-paren-mode 1)
(column-number-mode +1)

(add-to-list 'auto-mode-alist '("\\.ks\\'" . lisp-mode))

(add-hook 'haskell-mode-hook 'whitespace-mode)
(add-hook 'lisp-mode-hook 'whitespace-mode)
(add-hook 'lisp-interaction-mode-hook 'whitespace-mode)
(add-hook 'lisp-mode-hook (lambda () (setq indent-tabs-mode nil)))

(use-package attrap
  :straight t
  )

(use-package dante
  :straight t
  :after haskell-mode
  :commands 'dante-mode
  :init
  (add-hook 'haskell-mode-hook 'flycheck-mode)
  ;; OR:
  ;; (add-hook 'haskell-mode-hook 'flymake-mode)
  (add-hook 'haskell-mode-hook 'dante-mode)
  ;; This has to be run after flycheck is set up (in this case
  ;; implicitly, via dante).  If one uses the suggestion of the dante
  ;; README (i.e. to put it in the dante-mode-hook then it is run
  ;; every time dante-mode is enabled, and haskell-dante's next
  ;; checkers ends up containing haskell-hlint many times!
  :config
  (flycheck-add-next-checker 'haskell-dante '(warning . haskell-hlint))
  )

(use-package markdown-mode
  :straight t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  (add-hook 'markdown-mode-hook 'flyspell-mode)
  (setq ispell-dictionary "british")
  (add-hook 'markdown-mode-hook 'auto-fill-mode)
  )

(use-package helm
  :straight t
  :config
  (helm-mode 1)
  (require 'helm-config)
  )

;; https://tuhdo.github.io/helm-intro.html

(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-map "\C-h" 'backward-delete-char)
(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
(define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") #'helm-select-action)

(global-set-key (kbd "M-y") 'helm-show-kill-ring)

(setq ; open helm buffer inside current window, not occupy whole other window
      helm-split-window-in-side-p           t
      ; search for library in `require' and `declare-function' sexp.
      helm-ff-search-library-in-sexp        t
      ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-scroll-amount                    8
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(dante-methods (quote (bare-cabal bare-ghci)))
 '(load-home-init-file t t)
 '(whitespace-style
   (quote
    (face trailing tabs lines-tail newline empty tab-mark))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 113 :width normal :foundry "unknown" :family "Inconsolata"))))
 '(company-tooltip ((t (:background "white" :foreground "black"))))
 '(fixed-pitch ((t (:family "Inconsolata"))))
 '(whitespace-tab ((t (:background "black" :foreground "cyan")))))

(setq ring-bell-function 'ignore)

(add-hook 'after-init-hook 'global-company-mode)
