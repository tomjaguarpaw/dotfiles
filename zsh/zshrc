# There's a bit of latency in the startup.  It seems to be mostly compinit
# and setting the HISTFILE (which is large!)

CONFIG_DIR=$HOME/Config/dotfiles
ZSHRC=$CONFIG_DIR/zsh/zshrc
export EDITOR="emacsclient --tty --create-frame --alternate-editor=jmacs"

# Lines configured by zsh-newuser-install
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt appendhistory nomatch
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename $ZSHRC

autoload -Uz compinit
compinit
# End of lines added by compinstall

eval `dircolors $CONFIG_DIR/dircolors-data`
alias ls='ls --color=auto'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

setopt NO_AUTO_MENU
WORDCHARS=${WORDCHARS:s#/#}

autoload colors
colors

for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
        eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
        (( count = $count + 1 ))
done

PR_NO_COLOUR="%{$terminfo[sgr0]%}"

HOSTHASH=`echo $HOST | md5sum -`
HOSTHASHFIRST=${HOSTHASH:1:1}

case $HOSTHASHFIRST in
0)
	PC=$PR_WHITE
	;;
1)
	PC=$PR_GREEN
	;;
2)
	PC=$PR_YELLOW
	;;
3)
	PC=$PR_BLUE
	;;
4)
	PC=$PR_MAGENTA
	;;
5)
	PC=$PR_CYAN
	;;
6)
	PC=$PR_RED
	;;
7)
	PC=$PR_LIGHT_RED
	;;
8)
	PC=$PR_LIGHT_GREEN
	;;
9)
	PC=$PR_LIGHT_YELLOW
	;;
a)
	PC=$PR_LIGHT_BLUE
	;;
b)
	PC=$PR_LIGHT_MAGENTA
	;;
c)
	PC=$PR_LIGHT_CYAN
	;;
d)
	PC=$PR_LIGHT_WHITE
	;;
e)
	PC=$PR_LIGHT_RED
	;;
f)
	PC=$PR_LIGHT_GREEN
	;;
esac

PROMPT_FILE=/tmp/prompt-$$
touch $PROMPT_FILE

horiz_bar() {
    DATE=$(echo -n $(date))
    LENGTH=${#DATE}
    printf "_%.0s" {1.."$[$COLUMNS-$LENGTH]"}
    echo -n "$DATE"
    echo
}

function git_stash_count() {
  count=$(git stash list 2> /dev/null | wc -l | awk '{print $1}') || return
  if [[ $count -gt 0 ]]
  then
    echo -n " ${PR_RED}stashes${PR_NO_COLOUR}"
    echo -n "(${count})"
  fi
}

function jobs_count() {
  count=$((jobs) | wc -l | awk '{print $1}') || return
  if [[ $count -gt 0 ]]
  then
    echo -n " j${count}"
  fi
}

function staging_area() {
  git diff --cached --exit-code 2> /dev/null > /dev/null
  dirty=$?
  if [[ $dirty -eq 1 ]]
  then
    echo -n " ${PR_RED}staging area dirty${PR_NO_COLOUR}"
  fi
}

function git_diff() {
  git diff --exit-code 2> /dev/null > /dev/null
  dirty=$?
  if [[ $dirty -eq 1 ]]
  then
    echo -n " d"
  fi
}

function git_describe() {
  description=$(git describe --abbrev=1 --all 2> /dev/null)
  if [[ ! -z "$description" ]]
  then
    without_remotes=${description#remotes/}
    without_heads=${description#heads/}
    if [ "$without_remotes" != "$description" ]; then
        echo -n " $without_remotes"
    elif [ "$without_heads" != "$description" ]; then
        echo -n " $without_heads"
    fi
  fi
}

function git_rebasing() {
  GIT_DIR=$(git rev-parse --show-toplevel 2> /dev/null || true)
  if [[ -e $GIT_DIR/.git/rebase-apply ]]
  then
    echo -n " ${PR_RED}rebasing${PR_NO_COLOUR}"
  fi
}

function make_prompt() {
  git_stash_count
  jobs_count
  git_rebasing
  git_describe
  git_diff
  staging_area
}

generate_prompt() {
  ((TEMPFILE=`mktemp`; make_prompt > $TEMPFILE; mv $TEMPFILE $PROMPT_FILE) &) > /dev/null
}

# https://superuser.com/questions/382503/how-can-i-put-a-newline-in-my-zsh-prompt-without-causing-terminal-redraw-issues/986820#986820
NEWLINE=$'\n'

# All the prompt escapes are available at
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
set_prompt() {
  PROMPT="${PROMPT_COLOUR}%#${PR_NO_COLOUR} $ELAPSED_SHOW%*%(?.. ${PROMPT_COLOUR}E%?${PR_NO_COLOUR})$(cat $PROMPT_FILE) %~ P$$ ${PC}%M${PR_NO_COLOUR}${NEWLINE}"
}

precmd() {
  LAST_COMMAND_EXIT_CODE=$?
  if [ $LAST_COMMAND_EXIT_CODE -eq 0 ]; then
    PROMPT_COLOUR=${PR_GREEN}
  else
    PROMPT_COLOUR=${PR_RED}
  fi

  if [ "$ELAPSED_DONE" = "FALSE" ]; then
      cmd_end="$SECONDS"
      ELAPSED="$((cmd_end-cmd_start))"
      if [ "$ELAPSED" -gt 5 ]; then
          ELAPSED_SHOW="[$ELAPSED seconds elapsed] "
      else
          ELAPSED_SHOW=""
      fi
      ELAPSED_DONE=TRUE
  else
      ELAPSED_SHOW=""
  fi
  # The mv is the only thing that we need to be atomic, and it probably
  # is atomic enough.
  generate_prompt
  set_prompt
}

preexec() {
  horiz_bar
  ELAPSED_DONE=FALSE
  cmd_start="$SECONDS"
}
